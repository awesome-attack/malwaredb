{
    "alias": "Taidoor", 
    "analysis": {
        "_id": {
            "$oid": "5ba55587ba80ffe26b5152c0"
        }, 
        "description": "PE32 executable (GUI) Intel 80386, for MS Windows", 
        "file_id": "37beb64350ea14001f05235029a584df6b1c1cdf", 
        "fuzzy_hash": "384:NwCZvaL1wHS2s+hwJZltxi3oJhYwF68a3J4cvTBYNmZDbWQybPp1DHZ:NweyL1T2scwJZxi3b8atTSmXWQI3V", 
        "hash": {
            "md5": "0b799ba637aedb61a563ecd039624476", 
            "sha1": "37beb64350ea14001f05235029a584df6b1c1cdf", 
            "sha2": "c4927a7d6fb0f9509cf6d1d359fc5d8dfaaaa016db73402545d7b169803174b0"
        }, 
        "mime_type": "application/x-dosexec", 
        "particular_header": {
            "av_analysis": "Not_implemented", 
            "certificate": {}, 
            "child_of": "Not_implemented", 
            "cypher": "Not_implemented", 
            "date": "'0x4D37CE0D [SUSPICIOUS]'", 
            "ep": "'0x40226a .text 0/4'", 
            "exports": {
                "AddressOfNames": 29676, 
                "AddressOfOrdinals": 29680, 
                "addressOfFunctions": 29672, 
                "base": 1, 
                "characteristics": 0, 
                "majorVersion": 0, 
                "minorVersion": 0, 
                "name": 29682, 
                "numberOfFunctions": 1, 
                "numberOfNames": 1, 
                "symbols": [
                    {
                        "RVA": 33120, 
                        "name": "szfile", 
                        "ordinal": 1
                    }
                ], 
                "timeDateStamp": 1295483901
            }, 
            "file_entropy": 6.91464176061946, 
            "headers": {
                "dos_header": {
                    "cblp": "'0x90'", 
                    "cp": "'0x3'", 
                    "cparhdr": "'0x4'", 
                    "crlc": "'0x0'", 
                    "cs": "'0x0'", 
                    "csum": "'0x0'", 
                    "ip": "'0x0'", 
                    "lfanew": "'0xd8'", 
                    "lfarlc": "'0x40'", 
                    "magic": "'0x5a4d'", 
                    "maxalloc": "'0xffff'", 
                    "minalloc": "'0x0'", 
                    "oemid": "'0x0'", 
                    "oeminfo": "'0x0'", 
                    "ovno": "'0x0'", 
                    "res": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "res2": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "sp": "'0xb8'", 
                    "ss": "'0x0'"
                }, 
                "file_header": {
                    "Characteristics": "'0x10f'", 
                    "Machine": "'0x14c'", 
                    "NumberOfSections": "'0x4'", 
                    "NumberOfSymbols": "'0x0'", 
                    "PointerToSymbolTable": "'0x0'", 
                    "SizeOfOptionalHeader": "'0xe0'", 
                    "TimeDateStamp": "'0x4d37ce0d'"
                }, 
                "nt_header": {
                    "Signature": "'0x4550'"
                }, 
                "optional_header": {
                    "AddressOfEntryPoint": "'0x226a'", 
                    "BaseOfCode": "'0x1000'", 
                    "CheckSum": "'0x0'", 
                    "DllCharacteristics": "'0x0'", 
                    "FileAlignment": "'0x200'", 
                    "ImageBase": "'0x400000'", 
                    "LoaderFlags": "'0x0'", 
                    "Magic": "'0x10b'", 
                    "MajorImageVersion": "'0x0'", 
                    "MajorLinkerVersion": "'0x6'", 
                    "MajorOperatingSystemVersion": "'0x4'", 
                    "MajorSubsystemVersion": "'0x4'", 
                    "MinorImageVersion": "'0x0'", 
                    "MinorLinkerVersion": "'0x0'", 
                    "MinorOperatingSystemVersion": "'0x0'", 
                    "MinorSubsystemVersion": "'0x0'", 
                    "NumberOfRvaAndSizes": "'0x10'", 
                    "Reserved1": "'0x0'", 
                    "SectionAlignment": "'0x1000'", 
                    "SizeOfCode": "'0x5a00'", 
                    "SizeOfHeaders": "'0x400'", 
                    "SizeOfHeapCommit": "'0x1000'", 
                    "SizeOfHeapReserve": "'0x100000'", 
                    "SizeOfImage": "'0xa000'", 
                    "SizeOfInitializedData": "'0x1000'", 
                    "SizeOfStackCommit": "'0x1000'", 
                    "SizeOfStackReserve": "'0x100000'", 
                    "SizeOfUninitializedData": "'0x0'", 
                    "Subsystem": "'0x2'"
                }
            }, 
            "imports": [
                {
                    "functions": [
                        "'entercriticalsection'", 
                        "'virtualprotect'", 
                        "'initializecriticalsection'", 
                        "'getmodulehandlea'", 
                        "'heapalloc'", 
                        "'getprocessheap'", 
                        "'terminateprocess'", 
                        "'virtualallocex'", 
                        "'heapfree'", 
                        "'virtualalloc'", 
                        "'lstrlena'", 
                        "'getlasterror'", 
                        "'lstrcpya'", 
                        "'outputdebugstringa'", 
                        "'gettemppatha'", 
                        "'closehandle'", 
                        "'writefile'", 
                        "'setfilepointer'", 
                        "'exitprocess'", 
                        "'readfile'", 
                        "'getfilesize'", 
                        "'createfilea'", 
                        "'copyfilea'", 
                        "'getmodulefilenamea'", 
                        "'lstrcata'", 
                        "'getprocaddress'", 
                        "'writeprivateprofilestringa'", 
                        "'leavecriticalsection'"
                    ], 
                    "lib": "'kernel32.dll'"
                }, 
                {
                    "functions": [
                        "'messageboxa'"
                    ], 
                    "lib": "'user32.dll'"
                }, 
                {
                    "functions": [
                        "'cryptgenrandom'", 
                        "'cryptacquirecontexta'", 
                        "'cryptreleasecontext'"
                    ], 
                    "lib": "'advapi32.dll'"
                }
            ], 
            "imports_tree": "added", 
            "packer_detection": "Unknown", 
            "packer_version": "Not_implemented", 
            "res_entries": [
                {
                    "lang": "'LANG_ENGLISH'", 
                    "name": "'RT_VERSION'", 
                    "rva": "'0x9060'", 
                    "sha1": "ad57f97173966242511cfd866066692ca4bb1eb3", 
                    "size": "'0x410'", 
                    "sublang": "'SUBLANG_ENGLISH_US'", 
                    "type": "'data'"
                }
            ], 
            "sections": [
                {
                    "characteristics": "0xe0000020", 
                    "entropy": 7.344385013943618, 
                    "fuzzy_hash": "384:/wCZvaL1wHS2s+hwJZltxi3oJhYwF68a3J4cvTBYNmZDbWQy:/weyL1T2scwJZxi3b8atTSmXWQ", 
                    "md5": "f5941cdac0b9eff1d3b819d54ae3be6c", 
                    "name": "'.text\\x00\\x00\\x00'", 
                    "sha1": "c558cf3261d7d35ca3f6744c6207812374fbb2d2", 
                    "sha2": "d1efa80135b86a0902e2de0213a0e12c15e42df232846e3593dfe76767b65d0f", 
                    "size_raw_data": 23040, 
                    "virtual_size": 22760, 
                    "write_executable": "True"
                }, 
                {
                    "characteristics": "0x40000040", 
                    "entropy": 3.525206743299984, 
                    "fuzzy_hash": "24:LWupOG3pWupOGQ0RbiTbFd5XCMAdBjzphoIEwAIUv/f:LWupOEpWupOms5XCpBjzph+", 
                    "md5": "42595f358d82ed008b0da3cc81ff353d", 
                    "name": "'.rdata\\x00\\x00'", 
                    "sha1": "f534971c47ae8a0dda7a4f45207df4c00bdbedc8", 
                    "sha2": "25c0c69d99d563d6c27a697d8d1650f09b18059d3ed10632b9654c277b818554", 
                    "size_raw_data": 1536, 
                    "virtual_size": 1028, 
                    "write_executable": "False"
                }, 
                {
                    "characteristics": "0xc0000040", 
                    "entropy": 3.5979383099442304, 
                    "fuzzy_hash": "12:GfJLkLRRC8nYyiX9JuzgsEukiX9Cwlam:GfeRRvnWXfPJMdY", 
                    "md5": "62848389cf10326c055c3fa7fda85f0b", 
                    "name": "'.data\\x00\\x00\\x00'", 
                    "sha1": "8592be931582aeb5ffba6f61f70acbc5a56f00b7", 
                    "sha2": "800937c4bdd7d9fe14c9c688a7cdc87c793ec8a3d30ef3c6eaf30a5ddf30025a", 
                    "size_raw_data": 512, 
                    "virtual_size": 931, 
                    "write_executable": "False"
                }, 
                {
                    "characteristics": "0x40000040", 
                    "entropy": 2.657050757574394, 
                    "fuzzy_hash": "24:GWD4OaSD5lIVJKZN6UhuIVJK/kmmqXuuIGs33VJK6PNiUd:G1Oak5+EDtrE/ZmtuClE2V", 
                    "md5": "b5ed7b029bc65184d8f3a398fb854e6d", 
                    "name": "'.rsrc\\x00\\x00\\x00'", 
                    "sha1": "91766ab45f59a163181e3a98dd5559fc1f5b7b64", 
                    "sha2": "ab484bb161c47f30b51d4a3317ae12cf7fe110358d24eac33605632dce95bb83", 
                    "size_raw_data": 1536, 
                    "virtual_size": 1136, 
                    "write_executable": "False"
                }
            ], 
            "strings": {
                "domains": [
                    "'g.np'"
                ], 
                "emails": [
                    "'4$@2.dat'"
                ], 
                "hidden_imports": [
                    "'createprocessa'", 
                    "'getthreadcontext'", 
                    "'readprocessmemory'", 
                    "'resumethread'", 
                    "'setthreadcontext'", 
                    "'virtualprotectex'", 
                    "'virtualqueryex'", 
                    "'writeprocessmemory'"
                ], 
                "interesting": [
                    "'update.exe'"
                ], 
                "raw_strings": [
                    "'$[at'", 
                    "'$fne'", 
                    "'$o1$'", 
                    "'%li<'", 
                    "'%yp-'", 
                    "'&3j7'", 
                    "')alc'", 
                    "')l0kw'", 
                    "')qp)'", 
                    "',kmo'", 
                    "'-,vo'", 
                    "'-:0d]'", 
                    "'.tmp1'", 
                    "'/[0m'", 
                    "'0lclp'", 
                    "'0vq7'", 
                    "'1rb2t'", 
                    "'1rhg'", 
                    "'1x<wrg'", 
                    "'2,m$'", 
                    "'37%,a'", 
                    "'3elw'", 
                    "'3ynr'", 
                    "'4$@2.dat'", 
                    "'4sp2-a'", 
                    "'4sso'", 
                    "'6z9i'", 
                    "'7&ql'", 
                    "'7<fd'", 
                    "'7w_f'", 
                    "'8.d:'", 
                    "'8>ki'", 
                    "':?n,j'", 
                    "'>8z)z'", 
                    "'>ims'", 
                    "'[zvi0'", 
                    "']y:%'", 
                    "'_xea'", 
                    "'_z=l'", 
                    "'a,oyn'", 
                    "'a7tmx'", 
                    "'al j8%/'", 
                    "'ax_b'", 
                    "'bh.s'", 
                    "'bk::'", 
                    "'c(i='", 
                    "'c4js/'", 
                    "'c5tm'", 
                    "'createprocessa'", 
                    "'d]eo'", 
                    "'dm@g'", 
                    "'dnlo'", 
                    "'dzam'", 
                    "'e9dtty:'", 
                    "'e=:n'", 
                    "'eanq'", 
                    "'ef.d'", 
                    "'f-[n'", 
                    "'f3vu'", 
                    "'fv80k'", 
                    "'g)lq'", 
                    "'g.np'", 
                    "'getthreadcontext'", 
                    "'h57b5'", 
                    "'hodf'", 
                    "'jchra'", 
                    "'kernel32'", 
                    "'knoa'", 
                    "'kqu_'", 
                    "'kvx<'", 
                    "'l(o%'", 
                    "'l_em<'", 
                    "'lipk'", 
                    "'lki8o'", 
                    "'lzr '", 
                    "'m-/0'", 
                    "'ntdll'", 
                    "'o5ne.o'", 
                    "'oj r'", 
                    "'ojpj'", 
                    "'opqj'", 
                    "'ovdn5'", 
                    "'p-xy'", 
                    "'p3mm'", 
                    "'pgwc'", 
                    "'q)fa'", 
                    "'q4(n'", 
                    "'q?]l'", 
                    "'qtyg'", 
                    "'r%gb'", 
                    "'r):p'", 
                    "'r6e_'", 
                    "'readprocessmemory'", 
                    "'resumethread'", 
                    "'rj@j'", 
                    "'rwbinru/dyd'", 
                    "'s/=u'", 
                    "'s2:w'", 
                    "'s:hh'", 
                    "'setthreadcontext'", 
                    "'sphfx'", 
                    "'szfile'", 
                    "'t((u'", 
                    "'tn7c'", 
                    "'u?lvb'", 
                    "'update.exe'", 
                    "'uyz(-'", 
                    "'v2z,3'", 
                    "'virtualprotectex'", 
                    "'virtualqueryex'", 
                    "'vsdz:h'", 
                    "'w>nix'", 
                    "'win4'", 
                    "'writeprocessmemory'", 
                    "'x2(q'", 
                    "'xdhu'", 
                    "'yerb'", 
                    "'z(ab'", 
                    "'zgtkv'", 
                    "'zhcg'", 
                    "'zqfw'", 
                    "'zwunmapviewofsection'", 
                    "'zz?&'"
                ]
            }, 
            "version": {
                "fixed_file_info": {
                    "FileDateLS": "'0x0'", 
                    "FileDateMS": "'0x0'", 
                    "FileFlags": "'0x0'", 
                    "FileFlagsMask": "'0x0'", 
                    "FileOS": "'0x4'", 
                    "FileSubtype": "'0x0'", 
                    "FileType": "'0x2'", 
                    "FileVersionLS": "'0x350040'", 
                    "FileVersionMS": "'0xa0001'", 
                    "ProductVersionLS": "'0x350040'", 
                    "ProductVersionMS": "'0xa0001'", 
                    "Signature": "'0xfeef04bd'", 
                    "StrucVersion": "'0x10000'"
                }, 
                "string_file_info": {
                    "Comments": "None", 
                    "CompanyName": "Adobe Systems, Inc.", 
                    "FileDescription": "Adobe? Flash? Player Installer/Uninstaller 10.1 r53", 
                    "FileVersion": "10,1,53,64", 
                    "InternalName": "Adobe? Flash? Player Installer/Uninstaller 10.1", 
                    "LangID": "040904b0", 
                    "LegalCopyright": "Copyright ? 1996-2010 Adobe, Inc.", 
                    "LegalTrademarks": "Adobe? Flash? Player", 
                    "OriginalFilename": "FlashUtil.exe", 
                    "PrivateBuild": "None", 
                    "ProductName": "Flash? Player Installer/Uninstaller", 
                    "ProductVersion": "10,1,53,64", 
                    "SpecialBuild": "None"
                }, 
                "version_info": {
                    "Length": "'0x410'", 
                    "Type": "'0x0'", 
                    "ValueLength": "'0x34'"
                }
            }
        }, 
        "size": 27648
    }, 
    "attack-pattern": [
        {
            "created": "2017-05-31T21:30:31.197Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)\n\nDetection: If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1024", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1024"
                }, 
                {
                    "description": "F-Secure Labs. (2014, July). COSMICDUKE Cosmu with a twist of MiniDuke. Retrieved July 3, 2014.", 
                    "source_name": "F-Secure Cosmicduke", 
                    "url": "https://www.f-secure.com/documents/996508/1030745/cosmicduke%20whitepaper.pdf"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }, 
                {
                    "description": "Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for a DarkComet. Retrieved April 5, 2016.", 
                    "source_name": "Fidelis DarkComet", 
                    "url": "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf"
                }
            ], 
            "id": "attack-pattern--3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Custom Cryptographic Protocol", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Process use of network", 
                "Malware reverse engineering", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:47.843Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\n\n===Windows===\n\nThere are multiple approaches to injecting code into a live process. Windows implementations include: (Citation: Engame Process Injection July 2017)\n* '''Dynamic-link library (DLL) injection''' involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.\n* '''Portable executable injection''' involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. (Citation: Endgame HuntingNMemory June 2017)\n* '''Thread execution hijacking''' involves injecting malicious code or the path to a DLL into a thread of a process. Similar to Process Hollowing, the thread must first be suspended.\n* '''Asynchronous Procedure Call''' (APC) injection involves attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state. AtomBombing  (Citation: ENSIL AtomBombing Oct 2016) is a variation that utilizes APCs to invoke malicious code previously written to the global atom table. (Citation: Microsoft Atom Table)\n* '''Thread Local Storage''' (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. (Citation: FireEye TLS Nov 2017)\n\n===Mac and Linux===\n\nImplementations for Linux and OS X/macOS systems include: (Citation: Datawire Code Injection) (Citation: Uninformed Needle)\n*'''LD_PRELOAD, LD_LIBRARY_PATH''' (Linux), '''DYLD_INSERT_LIBRARIES''' (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. (Citation: Phrack halfdead 1997)\n*'''Ptrace system calls''' can be used to attach to a running process and modify it in runtime. (Citation: Uninformed Needle)\n*'''/proc/[pid]/mem''' provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. (Citation: Uninformed Needle)\n*'''VDSO hijacking''' performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. (Citation: VDSO hijack 2009)\n\nMalware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.\n\nDetection: Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique. (Citation: Engame Process Injection July 2017)\n\nMonitoring for Linux specific calls such as the ptrace system call, the use of LD_PRELOAD environment variable, or dlfcn dynamic linking API calls, should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.  (Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits)\n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. (Citation: Microsoft Sysmon v6 May 2017)\n\nMonitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. Code injection may also be performed using PowerShell with tools such as PowerSploit, (Citation: Powersploit) so additional PowerShell monitoring may be required to cover known implementations of this behavior.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: API monitoring, Windows Registry, File monitoring, DLL monitoring, Named Pipes, Process Monitoring\n\nEffective Permissions: User, Administrator, SYSTEM, root\n\nDefense Bypassed: Process whitelisting, Anti-virus\n\nPermissions Required: User, Administrator, SYSTEM, root\n\nContributors: Anastasios Pingios", 
            "external_references": [
                {
                    "external_id": "T1055", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1055"
                }, 
                {
                    "description": "PowerSploit. (n.d.).  Retrieved December 4, 2014.", 
                    "source_name": "Powersploit", 
                    "url": "https://github.com/mattifestation/PowerSploit"
                }, 
                {
                    "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.", 
                    "source_name": "Engame Process Injection July 2017", 
                    "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
                }, 
                {
                    "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.", 
                    "source_name": "Endgame HuntingNMemory June 2017", 
                    "url": "https://www.endgame.com/blog/technical-blog/hunting-memory"
                }, 
                {
                    "description": "Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017.", 
                    "source_name": "Microsoft APC", 
                    "url": "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx"
                }, 
                {
                    "description": "Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017.", 
                    "source_name": "ENSIL AtomBombing Oct 2016", 
                    "url": "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows"
                }, 
                {
                    "description": "Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017.", 
                    "source_name": "Microsoft Atom Table", 
                    "url": "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx"
                }, 
                {
                    "description": "Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017.", 
                    "source_name": "FireEye TLS Nov 2017", 
                    "url": "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html"
                }, 
                {
                    "description": "Turner-Trauring, I. (2017, April 18). \u201cThis will only hurt for a moment\u201d: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.", 
                    "source_name": "Datawire Code Injection", 
                    "url": "https://www.datawire.io/code-injection-on-linux-and-macos/"
                }, 
                {
                    "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.", 
                    "source_name": "Uninformed Needle", 
                    "url": "http://hick.org/code/skape/papers/needle.txt"
                }, 
                {
                    "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.", 
                    "source_name": "Phrack halfdead 1997", 
                    "url": "http://phrack.org/issues/51/8.html"
                }, 
                {
                    "description": "O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved December 20, 2017.", 
                    "source_name": "VDSO hijack 2009", 
                    "url": "http://vxer.org/lib/vrn00.html"
                }, 
                {
                    "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.", 
                    "source_name": "ArtOfMemoryForensics"
                }, 
                {
                    "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.", 
                    "source_name": "GNU Acct", 
                    "url": "https://www.gnu.org/software/acct/"
                }, 
                {
                    "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.", 
                    "source_name": "RHEL auditd", 
                    "url": "https://access.redhat.com/documentation/red%20hat%20enterprise%20linux/6/html/security%20guide/chap-system%20auditing"
                }, 
                {
                    "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.", 
                    "source_name": "Chokepoint preload rootkits", 
                    "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html"
                }, 
                {
                    "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.", 
                    "source_name": "Microsoft Sysmon v6 May 2017", 
                    "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon"
                }
            ], 
            "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "privilege-escalation"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Process Injection", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Anastasios Pingios"
            ], 
            "x_mitre_data_sources": [
                "API monitoring", 
                "Windows Registry", 
                "File monitoring", 
                "DLL monitoring", 
                "Named Pipes", 
                "Process Monitoring"
            ], 
            "x_mitre_defense_bypassed": [
                "Process whitelisting", 
                "Anti-virus"
            ], 
            "x_mitre_effective_permissions": [
                "User", 
                "Administrator", 
                "SYSTEM", 
                "root"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM", 
                "root"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }
    ], 
    "hash": "c4927a7d6fb0f9509cf6d1d359fc5d8dfaaaa016db73402545d7b169803174b0", 
    "name": "Taidoor"
}