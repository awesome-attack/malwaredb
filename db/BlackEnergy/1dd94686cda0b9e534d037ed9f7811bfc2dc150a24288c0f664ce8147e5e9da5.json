{
    "alias": "BlackEnergy", 
    "analysis": {
        "_id": {
            "$oid": "5ba550a2ba80ffe26b514c9b"
        }, 
        "description": "PE32 executable (GUI) Intel 80386, for MS Windows", 
        "file_id": "7ea8cc24ab8256685ec31ca5922ff801d094d285", 
        "fuzzy_hash": "384:ZAsY6ErHh+nZB2WMqQ/pQbrlqdsgKbWHhrfn1:+s4rBYE/pQXlqegLtfn1", 
        "hash": {
            "md5": "17000443da75873dbe802013f57426e8", 
            "sha1": "7ea8cc24ab8256685ec31ca5922ff801d094d285", 
            "sha2": "1dd94686cda0b9e534d037ed9f7811bfc2dc150a24288c0f664ce8147e5e9da5"
        }, 
        "mime_type": "application/x-dosexec", 
        "particular_header": {
            "av_analysis": "Not_implemented", 
            "certificate": {}, 
            "child_of": "Not_implemented", 
            "cypher": "Not_implemented", 
            "date": "'0x46706C88 [SUSPICIOUS]'", 
            "ep": "'0x40236d .text 0/3'", 
            "exports": {}, 
            "file_entropy": 6.316610703816786, 
            "headers": {
                "dos_header": {
                    "cblp": "'0x90'", 
                    "cp": "'0x3'", 
                    "cparhdr": "'0x4'", 
                    "crlc": "'0x0'", 
                    "cs": "'0x0'", 
                    "csum": "'0x0'", 
                    "ip": "'0x0'", 
                    "lfanew": "'0xf0'", 
                    "lfarlc": "'0x40'", 
                    "magic": "'0x5a4d'", 
                    "maxalloc": "'0xffff'", 
                    "minalloc": "'0x0'", 
                    "oemid": "'0x0'", 
                    "oeminfo": "'0x0'", 
                    "ovno": "'0x0'", 
                    "res": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "res2": "'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", 
                    "sp": "'0xb8'", 
                    "ss": "'0x0'"
                }, 
                "file_header": {
                    "Characteristics": "'0x10f'", 
                    "Machine": "'0x14c'", 
                    "NumberOfSections": "'0x3'", 
                    "NumberOfSymbols": "'0x0'", 
                    "PointerToSymbolTable": "'0x0'", 
                    "SizeOfOptionalHeader": "'0xe0'", 
                    "TimeDateStamp": "'0x46706c88'"
                }, 
                "nt_header": {
                    "Signature": "'0x4550'"
                }, 
                "optional_header": {
                    "AddressOfEntryPoint": "'0x236d'", 
                    "BaseOfCode": "'0x1000'", 
                    "CheckSum": "'0x0'", 
                    "DllCharacteristics": "'0x0'", 
                    "FileAlignment": "'0x200'", 
                    "ImageBase": "'0x400000'", 
                    "LoaderFlags": "'0x0'", 
                    "Magic": "'0x10b'", 
                    "MajorImageVersion": "'0x0'", 
                    "MajorLinkerVersion": "'0x7'", 
                    "MajorOperatingSystemVersion": "'0x4'", 
                    "MajorSubsystemVersion": "'0x4'", 
                    "MinorImageVersion": "'0x0'", 
                    "MinorLinkerVersion": "'0xa'", 
                    "MinorOperatingSystemVersion": "'0x0'", 
                    "MinorSubsystemVersion": "'0x0'", 
                    "NumberOfRvaAndSizes": "'0x10'", 
                    "Reserved1": "'0x0'", 
                    "SectionAlignment": "'0x1000'", 
                    "SizeOfCode": "'0x4600'", 
                    "SizeOfHeaders": "'0x400'", 
                    "SizeOfHeapCommit": "'0x1000'", 
                    "SizeOfHeapReserve": "'0x100000'", 
                    "SizeOfImage": "'0x15000'", 
                    "SizeOfInitializedData": "'0xee00'", 
                    "SizeOfStackCommit": "'0x1000'", 
                    "SizeOfStackReserve": "'0x100000'", 
                    "SizeOfUninitializedData": "'0x0'", 
                    "Subsystem": "'0x2'"
                }
            }, 
            "imports": [
                {
                    "functions": [
                        "'terminateprocess'", 
                        "'getcurrentprocess'", 
                        "'waitforsingleobject'", 
                        "'createprocessa'", 
                        "'virtualfree'", 
                        "'closehandle'", 
                        "'writefile'", 
                        "'createfilea'", 
                        "'virtualalloc'", 
                        "'gettickcount'", 
                        "'getsysteminfo'", 
                        "'virtualprotect'", 
                        "'getlocaleinfoa'", 
                        "'rtlunwind'", 
                        "'getstringtypew'", 
                        "'getstringtypea'", 
                        "'lcmapstringw'", 
                        "'multibytetowidechar'", 
                        "'getmodulehandlea'", 
                        "'getstartupinfoa'", 
                        "'getcommandlinea'", 
                        "'getversionexa'", 
                        "'exitprocess'", 
                        "'getprocaddress'", 
                        "'getstdhandle'", 
                        "'getmodulefilenamea'", 
                        "'unhandledexceptionfilter'", 
                        "'freeenvironmentstringsa'", 
                        "'getenvironmentstrings'", 
                        "'freeenvironmentstringsw'", 
                        "'widechartomultibyte'", 
                        "'getlasterror'", 
                        "'getenvironmentstringsw'", 
                        "'sethandlecount'", 
                        "'getfiletype'", 
                        "'heapdestroy'", 
                        "'heapcreate'", 
                        "'heapfree'", 
                        "'loadlibrarya'", 
                        "'getacp'", 
                        "'getoemcp'", 
                        "'getcpinfo'", 
                        "'heapalloc'", 
                        "'heaprealloc'", 
                        "'lcmapstringa'", 
                        "'virtualquery'"
                    ], 
                    "lib": "'kernel32.dll'"
                }, 
                {
                    "functions": [
                        "'dialogboxparama'", 
                        "'setdlgitemtexta'", 
                        "'getsystemmetrics'", 
                        "'setwindowpos'", 
                        "'messageboxa'", 
                        "'getdlgitemtexta'", 
                        "'wsprintfa'"
                    ], 
                    "lib": "'user32.dll'"
                }
            ], 
            "imports_tree": "added", 
            "packer_detection": "Unknown", 
            "packer_version": "Not_implemented", 
            "res_entries": [], 
            "sections": [
                {
                    "characteristics": "0xe0040020", 
                    "entropy": 6.475261258038032, 
                    "fuzzy_hash": "384:7AsY6ErHh+nZB2WMqQ/pQbrlqdsgKbWHhrfn:Es4rBYE/pQXlqegLtfn", 
                    "md5": "39cc783094f1d1fbfe598ba7120d4adc", 
                    "name": "'.text\\x00\\x00\\x00'", 
                    "sha1": "9bbc724691073340497f1ae67c8504ac4f2841c0", 
                    "sha2": "3861f6ee80944575093e1f910780afb13fa2b116b615f254694bc5c1a2f8368d", 
                    "size_raw_data": 17920, 
                    "virtual_size": 17516, 
                    "write_executable": "True"
                }, 
                {
                    "characteristics": "0xc0000040", 
                    "entropy": 2.311278138511387, 
                    "fuzzy_hash": "3:Xtllllllllllllllllllllllllllllllllllllb/pTRlkDq10tl/3+mvmkCNMvW1:nsDq10t0mvmkCNMvW1n", 
                    "md5": "754d510bfe79862c9163cf591a432a1c", 
                    "name": "'.data\\x00\\x00\\x00'", 
                    "sha1": "79bc2aab00f04bf954ffb9710e53acd2a0daf39f", 
                    "sha2": "53d3723ec98c4d390626bb8fa333ab6c31f3ceb0de3078bad3a84b23a5ab79e3", 
                    "size_raw_data": 23040, 
                    "virtual_size": 24216, 
                    "write_executable": "False"
                }, 
                {
                    "characteristics": "0x40000040", 
                    "entropy": 0.0, 
                    "fuzzy_hash": "3::", 
                    "md5": "d41d8cd98f00b204e9800998ecf8427e", 
                    "name": "'.rsrc\\x00\\x00\\x00'", 
                    "sha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709", 
                    "sha2": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", 
                    "size_raw_data": 36352, 
                    "virtual_size": 36152, 
                    "write_executable": "False"
                }
            ], 
            "strings": {
                "hidden_imports": [
                    "'getactivewindow'"
                ], 
                "interesting": [
                    "'_bot.exe'", 
                    "'crypt.exe '", 
                    "'mscoree.dll'"
                ], 
                "raw_strings": [
                    "'    '", 
                    "' runtime library'", 
                    "' t6s'", 
                    "' ver 1.7 (with http control)'", 
                    "',-./0123@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'", 
                    "'- floating point not loaded'", 
                    "'- not enough space for _onexit/atexit table'", 
                    "'- not enough space for arguments'", 
                    "'- not enough space for environment'", 
                    "'- not enough space for lowio initialization'", 
                    "'- not enough space for stdio initialization'", 
                    "'- not enough space for thread data'", 
                    "'- pure virtual function call'", 
                    "'- unable to initialize heap'", 
                    "'- unable to open console device'", 
                    "'- unexpected heap error'", 
                    "'- unexpected multithread lock error'", 
                    "'.bdata'", 
                    "'1000'", 
                    "'2000'", 
                    "'8mzu'", 
                    "'<=@@@@@@@'", 
                    "'<program name unknown>'", 
                    "'@@@@@@'", 
                    "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>@@@?456789:'", 
                    "'@pvss'", 
                    "'][yy'", 
                    "'_bot.exe'", 
                    "'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789'", 
                    "'blackenergy ddos bot'", 
                    "'build complete'", 
                    "'corexitprocess'", 
                    "'createfilea() error'", 
                    "'crypt.exe '", 
                    "'d$0d'", 
                    "'d$4pj'", 
                    "'d$<ph'", 
                    "'d$dp'", 
                    "'d$xph'", 
                    "'domain error'", 
                    "'done'", 
                    "'e ww'", 
                    "'getactivewindow'", 
                    "'getlastactivepopup'", 
                    "'getprocesswindowstation'", 
                    "'getuserobjectinformationa'", 
                    "'git%'", 
                    "'hp@@'", 
                    "'hpj@'", 
                    "'hsvwj'", 
                    "'http://somehost.net/stat.php'", 
                    "'hxj@'", 
                    "'l$0qh'", 
                    "'l$<q'", 
                    "'l$hqh'", 
                    "'l$lq'", 
                    "'l$xq'", 
                    "'microsoft visual c'", 
                    "'mscoree.dll'", 
                    "'please contact the application'", 
                    "'program: '", 
                    "'qqsvw3'", 
                    "'r6002'", 
                    "'r6008'", 
                    "'r6009'", 
                    "'r6016'", 
                    "'r6017'", 
                    "'r6018'", 
                    "'r6019'", 
                    "'r6024'", 
                    "'r6025'", 
                    "'r6026'", 
                    "'r6027'", 
                    "'r6028'", 
                    "'runtime error '", 
                    "'runtime error'", 
                    "'s support team for more information.'", 
                    "'sing error'", 
                    "'ss9]'", 
                    "'ssup'", 
                    "'suvw'", 
                    "'svw3'", 
                    "'svwu'", 
                    "'svwuj'", 
                    "'t ww'", 
                    "'t$ j'", 
                    "'t$ r'", 
                    "'t$$rh'", 
                    "'t$$t('", 
                    "'t$$vss'", 
                    "'t$lr'", 
                    "'t$lrh'", 
                    "'t$trh'", 
                    "'t-9]'", 
                    "'t/ku'", 
                    "'t3x<'", 
                    "'tevu'", 
                    "'this application has requested the runtime to terminate it in an unusual way.'", 
                    "'tloss error'", 
                    "'twf9'", 
                    "'tzvs'", 
                    "'u8ww3'", 
                    "'uisj'", 
                    "'vc20xc00u'", 
                    "'vwumh'", 
                    "'wait'", 
                    "'wj@3'", 
                    "'writefile() error'", 
                    "'writing params error'", 
                    "'wwvpvsw'", 
                    "'wwwwvsw'"
                ], 
                "urls": [
                    "'http://somehost.net/stat.php'"
                ]
            }, 
            "version": {}
        }, 
        "size": 19200
    }, 
    "attack-pattern": [
        {
            "created": "2017-05-31T21:30:43.063Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n===Services===\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n===Executable Installers===\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)\n\nDetection: Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nPlatforms: Windows\n\nData Sources: File monitoring, Process command-line parameters, Services\n\nEffective Permissions: User, Administrator, SYSTEM\n\nPermissions Required: User, Administrator\n\nContributors: Stefan Kanthak, Travis Smith, Tripwire", 
            "external_references": [
                {
                    "external_id": "T1044", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1044"
                }, 
                {
                    "description": "Kugler, R. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.", 
                    "source_name": "Mozilla Firefox Installer DLL Hijack", 
                    "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/"
                }, 
                {
                    "description": "Kanthak, S. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe\tallows remote code execution with escalation of privilege. Retrieved March 10, 2017.", 
                    "source_name": "Seclists Kanthak 7zip Installer", 
                    "url": "http://seclists.org/fulldisclosure/2015/Dec/34"
                }
            ], 
            "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "privilege-escalation"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "File System Permissions Weakness", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Stefan Kanthak", 
                "Travis Smith, Tripwire"
            ], 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters", 
                "Services"
            ], 
            "x_mitre_effective_permissions": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:25.060Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.\n\n===Mac===\n\nOn OSX, the native command <code>screencapture</code> is used to capture screenshots.\n\n===Linux===\n\nOn Linux, there is the native command <code>xwd</code>. (Citation: Antiquated Mac Malware)\n\nDetection: Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: API monitoring, Process monitoring, File monitoring", 
            "external_references": [
                {
                    "external_id": "T1113", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1113"
                }, 
                {
                    "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.", 
                    "source_name": "Antiquated Mac Malware", 
                    "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
                }
            ], 
            "id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "collection"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Screen Capture", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "API monitoring", 
                "Process monitoring", 
                "File monitoring"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:28.471Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows\n\nPermissions Required: User, Administrator, SYSTEM", 
            "external_references": [
                {
                    "external_id": "T1120", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1120"
                }
            ], 
            "id": "attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Peripheral Device Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:56.776Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1071", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1071"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Standard Application Layer Protocol", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Process use of network", 
                "Malware reverse engineering", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:43.915Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network\n\nPermissions Required: User, Administrator, SYSTEM", 
            "external_references": [
                {
                    "external_id": "T1046", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1046"
                }
            ], 
            "id": "attack-pattern--e3a12395-188d-4051-9a16-ea8e14d07b88", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Network Service Scanning", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Netflow/Enclave netflow", 
                "Network protocol analysis", 
                "Packet capture", 
                "Process command-line parameters", 
                "Process use of network"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:00.200Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. \n\nAdversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over server message block (SMB) (Citation: Wikipedia SMB) to interact with systems using remote procedure calls (RPCs), (Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels. (Citation: Microsoft Admin Shares)\n\nThe Net utility can be used to connect to Windows admin shares on remote systems using <code>net use</code> commands with valid credentials. (Citation: Technet Net Use)\n\nDetection: Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding. (Citation: Lateral Movement Payne) (Citation: Windows Event Forwarding Payne) Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as Net, on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.\n\nPlatforms: Windows\n\nData Sources: Process use of network, Authentication logs, Process command-line parameters, Process monitoring\n\nPermissions Required: Administrator\n\nSystem Requirements: File and printer sharing over SMB enabled.\nHost/network firewalls not blocking SMB ports between source and destination.\nUse of domain account in administrator group on remote system or default system admin account.", 
            "external_references": [
                {
                    "external_id": "T1077", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1077"
                }, 
                {
                    "description": "Wikipedia. (2016, June 12). Server Message Block. Retrieved June 12, 2016.", 
                    "source_name": "Wikipedia SMB", 
                    "url": "https://en.wikipedia.org/wiki/Server%20Message%20Block"
                }, 
                {
                    "description": "Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.", 
                    "source_name": "TechNet RPC", 
                    "url": "https://technet.microsoft.com/en-us/library/cc787851.aspx"
                }, 
                {
                    "description": "Microsoft. (n.d.). How to create and delete hidden or administrative shares on client computers. Retrieved November 20, 2014.", 
                    "source_name": "Microsoft Admin Shares", 
                    "url": "http://support.microsoft.com/kb/314984"
                }, 
                {
                    "description": "Microsoft. (n.d.). Net Use. Retrieved November 25, 2016.", 
                    "source_name": "Technet Net Use", 
                    "url": "https://technet.microsoft.com/bb490717.aspx"
                }, 
                {
                    "description": "Payne, J. (2015, November 26). Tracking Lateral Movement Part One - Special Groups and Specific Service Accounts. Retrieved February 1, 2016.", 
                    "source_name": "Lateral Movement Payne", 
                    "url": "http://blogs.technet.com/b/jepayne/archive/2015/11/27/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts.aspx"
                }, 
                {
                    "description": "Payne, J. (2015, November 23). Monitoring what matters - Windows Event Forwarding for everyone (even if you already have a SIEM.). Retrieved February 1, 2016.", 
                    "source_name": "Windows Event Forwarding Payne", 
                    "url": "http://blogs.technet.com/b/jepayne/archive/2015/11/24/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem.aspx"
                }
            ], 
            "id": "attack-pattern--ffe742ed-9100-4686-9e00-c331da544787", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "lateral-movement"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Windows Admin Shares", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process use of network", 
                "Authentication logs", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "File and printer sharing over SMB enabled.\nHost/network firewalls not blocking SMB ports between source and destination.\nUse of domain account in administrator group on remote system or default system admin account."
            ]
        }, 
        {
            "created": "2017-05-31T21:30:27.342Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User", 
            "external_references": [
                {
                    "external_id": "T1016", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1016"
                }
            ], 
            "id": "attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "System Network Configuration Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:07.462Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)\n\nAnother bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)\n\nDetection: There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.\n\nSome UAC bypass methods rely on modifying specific, user-accessible Registry settings.  For example:\n\n* The <code>eventvwr.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command</code> Registry key. (Citation: enigma0x3 Fileless UAC Bypass)\n* The <code>sdclt.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe</code> and <code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand</code> Registry keys. (Citation: enigma0x3 sdclt app paths) (Citation: enigma0x3 sdclt bypass)\n\nAnalysts should monitor these Registry settings for unauthorized changes.\n\nPlatforms: Windows\n\nData Sources: System calls, Process monitoring, Authentication logs, Process command-line parameters\n\nEffective Permissions: Administrator\n\nDefense Bypassed: Windows User Account Control\n\nPermissions Required: User, Administrator\n\nContributors: Stefan Kanthak, Casey Smith", 
            "external_references": [
                {
                    "external_id": "T1088", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1088"
                }, 
                {
                    "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.", 
                    "source_name": "TechNet How UAC Works", 
                    "url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works"
                }, 
                {
                    "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.", 
                    "source_name": "TechNet Inside UAC", 
                    "url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx"
                }, 
                {
                    "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.", 
                    "source_name": "MSDN COM Elevation", 
                    "url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx"
                }, 
                {
                    "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.", 
                    "source_name": "Davidson Windows", 
                    "url": "http://www.pretentiousname.com/misc/win7%20uac%20whitelist2.html"
                }, 
                {
                    "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.", 
                    "source_name": "Github UACMe", 
                    "url": "https://github.com/hfiref0x/UACME"
                }, 
                {
                    "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.", 
                    "source_name": "enigma0x3 Fileless UAC Bypass", 
                    "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/"
                }, 
                {
                    "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.", 
                    "source_name": "Fortinet Fareit", 
                    "url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware"
                }, 
                {
                    "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.", 
                    "source_name": "SANS UAC Bypass", 
                    "url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass"
                }, 
                {
                    "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.", 
                    "source_name": "enigma0x3 sdclt app paths", 
                    "url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/"
                }, 
                {
                    "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.", 
                    "source_name": "enigma0x3 sdclt bypass", 
                    "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/"
                }
            ], 
            "id": "attack-pattern--ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "privilege-escalation"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Bypass User Account Control", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Stefan Kanthak", 
                "Casey Smith"
            ], 
            "x_mitre_data_sources": [
                "System calls", 
                "Process monitoring", 
                "Authentication logs", 
                "Process command-line parameters"
            ], 
            "x_mitre_defense_bypassed": [
                "Windows User Account Control"
            ], 
            "x_mitre_effective_permissions": [
                "Administrator"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:48.728Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.\n\n===Windows===\n\nAn example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.\n\n===Mac and Linux===\n\nIn Mac and Linux, this is accomplished with the <code>ps</code> command.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator, SYSTEM\n\nSystem Requirements: Administrator, SYSTEM may provide better process ownership details", 
            "external_references": [
                {
                    "external_id": "T1057", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1057"
                }
            ], 
            "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Process Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "Administrator, SYSTEM may provide better process ownership details"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:48.323Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, (Citation: Adventures of a Keystroke) but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider. (Citation: Wrightson 2012)\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service. (Citation: Volexity Virtual Private Keylogging)\n\nDetection: Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsynceyState. (Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes and detect driver installs, as well as looking for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.\n\nMonitor the Registry for the addition of a Custom Credential Provider. (Citation: Wrightson 2012) Detection of compromised Valid Accounts in use by adversaries may help to catch the result of user input interception if new techniques are used.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Windows Registry, Kernel drivers, Process monitoring, API monitoring\n\nPermissions Required: Administrator, SYSTEM\n\nContributors: John Lambert, Microsoft Threat Intelligence Center", 
            "external_references": [
                {
                    "external_id": "T1056", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1056"
                }, 
                {
                    "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.", 
                    "source_name": "Adventures of a Keystroke"
                }, 
                {
                    "description": "Wrightson, T. (2012, January 2). CAPTURING WINDOWS 7 CREDENTIALS AT LOGON USING CUSTOM CREDENTIAL PROVIDER. Retrieved November 12, 2014.", 
                    "source_name": "Wrightson 2012", 
                    "url": "http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/"
                }, 
                {
                    "description": "Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.", 
                    "source_name": "Volexity Virtual Private Keylogging", 
                    "url": "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
                }
            ], 
            "id": "attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "collection"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "credential-access"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Input Capture", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "John Lambert, Microsoft Threat Intelligence Center"
            ], 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "Kernel drivers", 
                "Process monitoring", 
                "API monitoring"
            ], 
            "x_mitre_permissions_required": [
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:45.139Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\n===Windows===\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net.\n\n===Mac and Linux ===\n\nIn Mac and Linux, <code>netstat</code> and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\".\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator", 
            "external_references": [
                {
                    "external_id": "T1049", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1049"
                }
            ], 
            "id": "attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "System Network Connections Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:49.988Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) The program will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\nDetection: Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. (Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, File monitoring\n\nPermissions Required: User, Administrator", 
            "external_references": [
                {
                    "external_id": "T1060", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1060"
                }, 
                {
                    "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.", 
                    "source_name": "Microsoft Run Key", 
                    "url": "http://msdn.microsoft.com/en-us/library/aa376977"
                }, 
                {
                    "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.", 
                    "source_name": "TechNet Autoruns", 
                    "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902"
                }
            ], 
            "id": "attack-pattern--9422fc14-1c43-410d-ab0f-a709b76c72dc", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Registry Run Keys / Start Folder", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "File monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:02.188Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may search local file systems and remote file shares for files containing passwords.  These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through Credential Dumping. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nDetection: While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Process command-line parameters\n\nPermissions Required: User, Administrator, SYSTEM\n\nSystem Requirements: Access to files", 
            "external_references": [
                {
                    "external_id": "T1081", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1081"
                }, 
                {
                    "description": "CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part 1. Retrieved November 12, 2014.", 
                    "source_name": "CG 2014", 
                    "url": "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html"
                }, 
                {
                    "description": "Security Research and Defense. (2014, May 13). MS14-025: An Update for Group Policy Preferences. Retrieved January 28, 2015.", 
                    "source_name": "SRD GPP", 
                    "url": "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx"
                }
            ], 
            "id": "attack-pattern--ba8e391f-14b5-496f-81f2-2d5ecd646c1c", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "credential-access"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Credentials in Files", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "Access to files"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:04.710Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. \n\n===Windows===\n\nExample utilities used to obtain this information are <code>dir</code> and <code>tree</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the Windows API.\n\n===Mac and Linux===\n\nIn Mac and Linux, this kind of discovery is accomplished with the <code>ls</code>, <code>find</code>, and <code>locate</code> commands.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator, SYSTEM\n\nSystem Requirements: Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls", 
            "external_references": [
                {
                    "external_id": "T1083", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1083"
                }, 
                {
                    "description": "Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.", 
                    "source_name": "Windows Commands JPCERT", 
                    "url": "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html"
                }
            ], 
            "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "File and Directory Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ], 
            "x_mitre_system_requirements": [
                "Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:45.613Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. (Citation: TechNet Services) A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. \n\nAdversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.\n\nDetection: Monitor service creation through changes in the Registry and common utilities using command-line invocation. New, benign services may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence. (Citation: TechNet Autoruns) Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.\n\nMonitor processes and command-line arguments for actions that could create services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters\n\nEffective Permissions: SYSTEM\n\nPermissions Required: Administrator, SYSTEM", 
            "external_references": [
                {
                    "external_id": "T1050", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1050"
                }, 
                {
                    "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.", 
                    "source_name": "TechNet Autoruns", 
                    "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902"
                }, 
                {
                    "description": "Microsoft. (n.d.). Services. Retrieved June 7, 2016.", 
                    "source_name": "TechNet Services", 
                    "url": "https://technet.microsoft.com/en-us/library/cc772408.aspx"
                }
            ], 
            "id": "attack-pattern--478aa214-2ca7-4ec0-9978-18798e514790", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "privilege-escalation"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "New Service", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Windows Registry", 
                "Process monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_effective_permissions": [
                "SYSTEM"
            ], 
            "x_mitre_permissions_required": [
                "Administrator", 
                "SYSTEM"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:30.757Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.\n\nDetection: Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\nPlatforms: Windows\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator\n\nContributors: Travis Smith, Tripwire", 
            "external_references": [
                {
                    "external_id": "T1023", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1023"
                }
            ], 
            "id": "attack-pattern--970cdb5c-02fb-4c38-b17e-d6327cf3c810", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "persistence"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Shortcut Modification", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Travis Smith, Tripwire"
            ], 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:17.915Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)\n\nDetection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.\n\nPlatforms: Linux, Windows, macOS\n\nData Sources: Binary file metadata, File monitoring, Process command-line parameters\n\nDefense Bypassed: Host forensic analysis\n\nPermissions Required: User\n\nContributors: Walker Johnson", 
            "external_references": [
                {
                    "external_id": "T1107", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1107"
                }, 
                {
                    "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.", 
                    "source_name": "Trend Micro APT Attack Tools", 
                    "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
                }
            ], 
            "id": "attack-pattern--56fca983-1cf1-4fd1-bda0-5e170a37ab59", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "File Deletion", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Walker Johnson"
            ], 
            "x_mitre_data_sources": [
                "Binary file metadata", 
                "File monitoring", 
                "Process command-line parameters"
            ], 
            "x_mitre_defense_bypassed": [
                "Host forensic analysis"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "Windows", 
                "macOS"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:21.689Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring\n\nRequires Network: Yes", 
            "external_references": [
                {
                    "external_id": "T1008", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1008"
                }, 
                {
                    "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", 
                    "source_name": "University of Birmingham C2", 
                    "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
                }
            ], 
            "id": "attack-pattern--f24faf46-3b26-4dbb-98f2-63460498e433", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "command-and-control"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Fallback Channels", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Packet capture", 
                "Netflow/Enclave netflow", 
                "Malware reverse engineering", 
                "Process use of network", 
                "Process monitoring"
            ], 
            "x_mitre_network_requirements": true, 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:55.892Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.\n\nDetection: File system monitoring may be used to detect improper deletion or modification of indicator files. Events not stored on the file system will require different detection mechanisms.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring\n\nDefense Bypassed: Anti-virus, Log analysis, Host intrusion prevention systems", 
            "external_references": [
                {
                    "external_id": "T1070", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1070"
                }
            ], 
            "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Indicator Removal on Host", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "File monitoring", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_defense_bypassed": [
                "Anti-virus", 
                "Log analysis", 
                "Host intrusion prevention systems"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:31:04.307Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\n\n===Windows===\n\nExample commands and utilities that obtain this information include <code>ver</code>, Systeminfo, and <code>dir</code> within cmd for identifying information based on present files and directories.\n\n===Mac===\n\nOn Mac, the <code>systemsetup</code> command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the <code>system_profiler</code> gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: Process command-line parameters, Process monitoring\n\nPermissions Required: User", 
            "external_references": [
                {
                    "external_id": "T1082", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1082"
                }
            ], 
            "id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "discovery"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "System Information Discovery", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:47.843Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\n\n===Windows===\n\nThere are multiple approaches to injecting code into a live process. Windows implementations include: (Citation: Engame Process Injection July 2017)\n* '''Dynamic-link library (DLL) injection''' involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.\n* '''Portable executable injection''' involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. (Citation: Endgame HuntingNMemory June 2017)\n* '''Thread execution hijacking''' involves injecting malicious code or the path to a DLL into a thread of a process. Similar to Process Hollowing, the thread must first be suspended.\n* '''Asynchronous Procedure Call''' (APC) injection involves attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state. AtomBombing  (Citation: ENSIL AtomBombing Oct 2016) is a variation that utilizes APCs to invoke malicious code previously written to the global atom table. (Citation: Microsoft Atom Table)\n* '''Thread Local Storage''' (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. (Citation: FireEye TLS Nov 2017)\n\n===Mac and Linux===\n\nImplementations for Linux and OS X/macOS systems include: (Citation: Datawire Code Injection) (Citation: Uninformed Needle)\n*'''LD_PRELOAD, LD_LIBRARY_PATH''' (Linux), '''DYLD_INSERT_LIBRARIES''' (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. (Citation: Phrack halfdead 1997)\n*'''Ptrace system calls''' can be used to attach to a running process and modify it in runtime. (Citation: Uninformed Needle)\n*'''/proc/[pid]/mem''' provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. (Citation: Uninformed Needle)\n*'''VDSO hijacking''' performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. (Citation: VDSO hijack 2009)\n\nMalware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.\n\nDetection: Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique. (Citation: Engame Process Injection July 2017)\n\nMonitoring for Linux specific calls such as the ptrace system call, the use of LD_PRELOAD environment variable, or dlfcn dynamic linking API calls, should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.  (Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits)\n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. (Citation: Microsoft Sysmon v6 May 2017)\n\nMonitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. Code injection may also be performed using PowerShell with tools such as PowerSploit, (Citation: Powersploit) so additional PowerShell monitoring may be required to cover known implementations of this behavior.\n\nPlatforms: Linux, macOS, Windows\n\nData Sources: API monitoring, Windows Registry, File monitoring, DLL monitoring, Named Pipes, Process Monitoring\n\nEffective Permissions: User, Administrator, SYSTEM, root\n\nDefense Bypassed: Process whitelisting, Anti-virus\n\nPermissions Required: User, Administrator, SYSTEM, root\n\nContributors: Anastasios Pingios", 
            "external_references": [
                {
                    "external_id": "T1055", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1055"
                }, 
                {
                    "description": "PowerSploit. (n.d.).  Retrieved December 4, 2014.", 
                    "source_name": "Powersploit", 
                    "url": "https://github.com/mattifestation/PowerSploit"
                }, 
                {
                    "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.", 
                    "source_name": "Engame Process Injection July 2017", 
                    "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
                }, 
                {
                    "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.", 
                    "source_name": "Endgame HuntingNMemory June 2017", 
                    "url": "https://www.endgame.com/blog/technical-blog/hunting-memory"
                }, 
                {
                    "description": "Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017.", 
                    "source_name": "Microsoft APC", 
                    "url": "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx"
                }, 
                {
                    "description": "Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017.", 
                    "source_name": "ENSIL AtomBombing Oct 2016", 
                    "url": "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows"
                }, 
                {
                    "description": "Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017.", 
                    "source_name": "Microsoft Atom Table", 
                    "url": "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx"
                }, 
                {
                    "description": "Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017.", 
                    "source_name": "FireEye TLS Nov 2017", 
                    "url": "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html"
                }, 
                {
                    "description": "Turner-Trauring, I. (2017, April 18). \u201cThis will only hurt for a moment\u201d: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.", 
                    "source_name": "Datawire Code Injection", 
                    "url": "https://www.datawire.io/code-injection-on-linux-and-macos/"
                }, 
                {
                    "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.", 
                    "source_name": "Uninformed Needle", 
                    "url": "http://hick.org/code/skape/papers/needle.txt"
                }, 
                {
                    "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.", 
                    "source_name": "Phrack halfdead 1997", 
                    "url": "http://phrack.org/issues/51/8.html"
                }, 
                {
                    "description": "O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved December 20, 2017.", 
                    "source_name": "VDSO hijack 2009", 
                    "url": "http://vxer.org/lib/vrn00.html"
                }, 
                {
                    "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.", 
                    "source_name": "ArtOfMemoryForensics"
                }, 
                {
                    "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.", 
                    "source_name": "GNU Acct", 
                    "url": "https://www.gnu.org/software/acct/"
                }, 
                {
                    "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.", 
                    "source_name": "RHEL auditd", 
                    "url": "https://access.redhat.com/documentation/red%20hat%20enterprise%20linux/6/html/security%20guide/chap-system%20auditing"
                }, 
                {
                    "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.", 
                    "source_name": "Chokepoint preload rootkits", 
                    "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html"
                }, 
                {
                    "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.", 
                    "source_name": "Microsoft Sysmon v6 May 2017", 
                    "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon"
                }
            ], 
            "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "defense-evasion"
                }, 
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "privilege-escalation"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Process Injection", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_contributors": [
                "Anastasios Pingios"
            ], 
            "x_mitre_data_sources": [
                "API monitoring", 
                "Windows Registry", 
                "File monitoring", 
                "DLL monitoring", 
                "Named Pipes", 
                "Process Monitoring"
            ], 
            "x_mitre_defense_bypassed": [
                "Process whitelisting", 
                "Anti-virus"
            ], 
            "x_mitre_effective_permissions": [
                "User", 
                "Administrator", 
                "SYSTEM", 
                "root"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator", 
                "SYSTEM", 
                "root"
            ], 
            "x_mitre_platforms": [
                "Linux", 
                "macOS", 
                "Windows"
            ]
        }, 
        {
            "created": "2017-05-31T21:30:44.329Z", 
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", 
            "description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) (Citation: Wikipedia SMB) and Remote Procedure Call Service (RPCS) (Citation: TechNet RPC) for remote access. RPCS operates over port 135. (Citation: MSDN WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI 2015)\n\nDetection: Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior. (Citation: FireEye WMI 2015)\n\nPlatforms: Windows\n\nData Sources: Authentication logs, Netflow/Enclave netflow, Process command-line parameters, Process monitoring\n\nPermissions Required: User, Administrator\n\nSystem Requirements: WMI service, winmgmt, running.\nHost/network firewalls allowing SMB and WMI ports from source to destination.\nSMB authentication.\n\nRemote Support: Yes", 
            "external_references": [
                {
                    "external_id": "T1047", 
                    "source_name": "mitre-attack", 
                    "url": "https://attack.mitre.org/wiki/Technique/T1047"
                }, 
                {
                    "description": "Wikipedia. (2016, June 12). Server Message Block. Retrieved June 12, 2016.", 
                    "source_name": "Wikipedia SMB", 
                    "url": "https://en.wikipedia.org/wiki/Server%20Message%20Block"
                }, 
                {
                    "description": "Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.", 
                    "source_name": "TechNet RPC", 
                    "url": "https://technet.microsoft.com/en-us/library/cc787851.aspx"
                }, 
                {
                    "description": "Microsoft. (n.d.). Windows Management Instrumentation. Retrieved April 27, 2016.", 
                    "source_name": "MSDN WMI", 
                    "url": "https://msdn.microsoft.com/en-us/library/aa394582.aspx"
                }, 
                {
                    "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.", 
                    "source_name": "FireEye WMI 2015", 
                    "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"
                }
            ], 
            "id": "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055", 
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack", 
                    "phase_name": "execution"
                }
            ], 
            "modified": "2018-04-18T17:59:24.739Z", 
            "name": "Windows Management Instrumentation", 
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ], 
            "type": "attack-pattern", 
            "x_mitre_data_sources": [
                "Authentication logs", 
                "Netflow/Enclave netflow", 
                "Process command-line parameters", 
                "Process monitoring"
            ], 
            "x_mitre_permissions_required": [
                "User", 
                "Administrator"
            ], 
            "x_mitre_platforms": [
                "Windows"
            ], 
            "x_mitre_remote_support": true, 
            "x_mitre_system_requirements": [
                "WMI service, winmgmt, running.\nHost/network firewalls allowing SMB and WMI ports from source to destination.\nSMB authentication."
            ]
        }
    ], 
    "hash": "1dd94686cda0b9e534d037ed9f7811bfc2dc150a24288c0f664ce8147e5e9da5", 
    "name": "BlackEnergy"
}